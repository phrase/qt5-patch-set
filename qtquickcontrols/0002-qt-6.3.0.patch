From edad31e94710b6907e8fb79e23fc388f14fe4db8 Mon Sep 17 00:00:00 2001
From: Michal Lazo <michal.lazo@memsource.com>
Date: Tue, 7 Jun 2022 15:26:20 +0200
Subject: [PATCH] qt 6.3.0

---
 src/controls/Private/qquickabstractstyle.cpp   | 4 ++--
 src/controls/Private/qquickabstractstyle_p.h   | 4 ++--
 src/controls/Private/qquickcontrolsettings.cpp | 8 ++++----
 src/controls/Private/qquickstyleitem.cpp       | 5 ++---
 src/controls/qquickmenu.cpp                    | 4 ++--
 src/controls/qquickmenu_p.h                    | 4 ++--
 src/controls/qquickmenubar.cpp                 | 4 ++--
 src/controls/qquickmenubar_p.h                 | 4 ++--
 src/dialogs/plugin.cpp                         | 1 -
 src/dialogs/qquickabstractdialog.cpp           | 2 +-
 10 files changed, 19 insertions(+), 21 deletions(-)

diff --git a/src/controls/Private/qquickabstractstyle.cpp b/src/controls/Private/qquickabstractstyle.cpp
index cd283959..5bb338e0 100644
--- a/src/controls/Private/qquickabstractstyle.cpp
+++ b/src/controls/Private/qquickabstractstyle.cpp
@@ -75,14 +75,14 @@ void QQuickAbstractStyle1::data_append(QQmlListProperty<QObject> *list, QObject
         style->m_data.append(object);
 }
 
-int QQuickAbstractStyle1::data_count(QQmlListProperty<QObject> *list)
+qsizetype QQuickAbstractStyle1::data_count(QQmlListProperty<QObject> *list)
 {
     if (QQuickAbstractStyle1 *style = qobject_cast<QQuickAbstractStyle1 *>(list->object))
         return style->m_data.count();
     return 0;
 }
 
-QObject *QQuickAbstractStyle1::data_at(QQmlListProperty<QObject> *list, int index)
+QObject *QQuickAbstractStyle1::data_at(QQmlListProperty<QObject> *list, qsizetype index)
 {
     if (QQuickAbstractStyle1 *style = qobject_cast<QQuickAbstractStyle1 *>(list->object))
         return style->m_data.at(index);
diff --git a/src/controls/Private/qquickabstractstyle_p.h b/src/controls/Private/qquickabstractstyle_p.h
index 735c33c3..0726266f 100644
--- a/src/controls/Private/qquickabstractstyle_p.h
+++ b/src/controls/Private/qquickabstractstyle_p.h
@@ -63,8 +63,8 @@ public:
 
 private:
     static void data_append(QQmlListProperty<QObject> *list, QObject *object);
-    static int data_count(QQmlListProperty<QObject> *list);
-    static QObject *data_at(QQmlListProperty<QObject> *list, int index);
+    static qsizetype data_count(QQmlListProperty<QObject> *list);
+    static QObject *data_at(QQmlListProperty<QObject> *list, qsizetype index);
     static void data_clear(QQmlListProperty<QObject> *list);
 
     QQuickPadding1 m_padding;
diff --git a/src/controls/Private/qquickcontrolsettings.cpp b/src/controls/Private/qquickcontrolsettings.cpp
index d06f931a..67b33b7b 100644
--- a/src/controls/Private/qquickcontrolsettings.cpp
+++ b/src/controls/Private/qquickcontrolsettings.cpp
@@ -47,7 +47,7 @@
 #include <qlibrary.h>
 #endif
 #include <qdir.h>
-#include <QTouchDevice>
+#include <QInputDevice>
 #include <QGuiApplication>
 #include <QStyleHints>
 #if defined(Q_OS_ANDROID) && !defined(Q_OS_ANDROID_EMBEDDED)
@@ -108,9 +108,9 @@ static bool fromResource(const QString &path)
 
 bool QQuickControlSettings1::hasTouchScreen() const
 {
-    const auto devices = QTouchDevice::devices();
-    for (const QTouchDevice *dev : devices)
-        if (dev->type() == QTouchDevice::TouchScreen)
+    const auto devices = QInputDevice::devices();
+    for (const auto *dev : devices)
+        if (dev->type() == QInputDevice::DeviceType::TouchScreen)
             return true;
     return false;
 }
diff --git a/src/controls/Private/qquickstyleitem.cpp b/src/controls/Private/qquickstyleitem.cpp
index 20d89356..873a8e24 100644
--- a/src/controls/Private/qquickstyleitem.cpp
+++ b/src/controls/Private/qquickstyleitem.cpp
@@ -506,7 +506,7 @@ void QQuickStyleItem1::initStyleOption()
                 QString shortcut = m_properties[QStringLiteral("shortcut")].toString();
                 if (!shortcut.isEmpty()) {
                     opt->text += QLatin1Char('\t') + shortcut;
-                    opt->tabWidth = qMax(opt->tabWidth, qRound(textWidth(shortcut)));
+                    opt->reservedShortcutWidth = qMax(opt->reservedShortcutWidth, qRound(textWidth(shortcut)));
                 }
 
                 if (m_properties[QStringLiteral("checkable")].toBool()) {
@@ -645,7 +645,6 @@ void QQuickStyleItem1::initStyleOption()
             m_styleoption = new QStyleOptionProgressBar();
 
         QStyleOptionProgressBar *opt = qstyleoption_cast<QStyleOptionProgressBar*>(m_styleoption);
-        opt->orientation = horizontal() ? Qt::Horizontal : Qt::Vertical;
         opt->minimum = minimum();
         opt->maximum = maximum();
         opt->progress = value();
@@ -743,7 +742,7 @@ void QQuickStyleItem1::initStyleOption()
     // some styles don't draw a focus rectangle if
     // QStyle::State_KeyboardFocusChange is not set
     if (window()) {
-         Qt::FocusReason lastFocusReason = QQuickWindowPrivate::get(window())->lastFocusReason;
+         Qt::FocusReason lastFocusReason = QQuickWindowPrivate::get(window())->deliveryAgentPrivate()->lastFocusReason;
          if (lastFocusReason == Qt::TabFocusReason || lastFocusReason == Qt::BacktabFocusReason) {
              m_styleoption->state |= QStyle::State_KeyboardFocusChange;
          }
diff --git a/src/controls/qquickmenu.cpp b/src/controls/qquickmenu.cpp
index bbbbe97c..360a80a1 100644
--- a/src/controls/qquickmenu.cpp
+++ b/src/controls/qquickmenu.cpp
@@ -861,7 +861,7 @@ void QQuickMenu1::append_menuItems(QQuickMenuItems *list, QObject *o)
     }
 }
 
-int QQuickMenu1::count_menuItems(QQuickMenuItems *list)
+qsizetype QQuickMenu1::count_menuItems(QQuickMenuItems *list)
 {
     if (QQuickMenu1 *menu = qobject_cast<QQuickMenu1 *>(list->object))
         return menu->m_itemsCount;
@@ -869,7 +869,7 @@ int QQuickMenu1::count_menuItems(QQuickMenuItems *list)
     return 0;
 }
 
-QObject *QQuickMenu1::at_menuItems(QQuickMenuItems *list, int index)
+QObject *QQuickMenu1::at_menuItems(QQuickMenuItems *list, qsizetype index)
 {
     if (QQuickMenu1 *menu = qobject_cast<QQuickMenu1 *>(list->object))
         return menu->menuItemAtIndex(index);
diff --git a/src/controls/qquickmenu_p.h b/src/controls/qquickmenu_p.h
index 6a159832..cfc913ae 100644
--- a/src/controls/qquickmenu_p.h
+++ b/src/controls/qquickmenu_p.h
@@ -190,8 +190,8 @@ private:
     QQuickMenuBase1 *nextMenuItem(MenuItemIterator *) const;
 
     static void append_menuItems(QQuickMenuItems *list, QObject *o);
-    static int count_menuItems(QQuickMenuItems *list);
-    static QObject *at_menuItems(QQuickMenuItems *list, int index);
+    static qsizetype count_menuItems(QQuickMenuItems *list);
+    static QObject *at_menuItems(QQuickMenuItems *list, qsizetype index);
     static void clear_menuItems(QQuickMenuItems *list);
 
     void unparentItem(QQuickMenuBase1 *menuItem);
diff --git a/src/controls/qquickmenubar.cpp b/src/controls/qquickmenubar.cpp
index 60673366..5bbea8d7 100644
--- a/src/controls/qquickmenubar.cpp
+++ b/src/controls/qquickmenubar.cpp
@@ -152,14 +152,14 @@ void QQuickMenuBar1::append_menu(QQmlListProperty<QQuickMenu1> *list, QQuickMenu
     }
 }
 
-int QQuickMenuBar1::count_menu(QQmlListProperty<QQuickMenu1> *list)
+qsizetype QQuickMenuBar1::count_menu(QQmlListProperty<QQuickMenu1> *list)
 {
     if (QQuickMenuBar1 *menuBar = qobject_cast<QQuickMenuBar1 *>(list->object))
         return menuBar->m_menus.size();
     return 0;
 }
 
-QQuickMenu1 *QQuickMenuBar1::at_menu(QQmlListProperty<QQuickMenu1> *list, int index)
+QQuickMenu1 *QQuickMenuBar1::at_menu(QQmlListProperty<QQuickMenu1> *list, qsizetype index)
 {
     QQuickMenuBar1 *menuBar = qobject_cast<QQuickMenuBar1 *>(list->object);
     if (menuBar &&  0 <= index && index < menuBar->m_menus.size())
diff --git a/src/controls/qquickmenubar_p.h b/src/controls/qquickmenubar_p.h
index d2e44435..6bed0915 100644
--- a/src/controls/qquickmenubar_p.h
+++ b/src/controls/qquickmenubar_p.h
@@ -88,8 +88,8 @@ public:
 private:
     void setNativeNoNotify(bool native);
     static void append_menu(QQmlListProperty<QQuickMenu1> *list, QQuickMenu1 *menu);
-    static int count_menu(QQmlListProperty<QQuickMenu1> *list);
-    static QQuickMenu1 *at_menu(QQmlListProperty<QQuickMenu1> *list, int index);
+    static qsizetype count_menu(QQmlListProperty<QQuickMenu1> *list);
+    static QQuickMenu1 *at_menu(QQmlListProperty<QQuickMenu1> *list, qsizetype index);
 
 private:
     QList<QQuickMenu1 *> m_menus;
diff --git a/src/dialogs/plugin.cpp b/src/dialogs/plugin.cpp
index 5b192505..6a12d094 100644
--- a/src/dialogs/plugin.cpp
+++ b/src/dialogs/plugin.cpp
@@ -57,7 +57,6 @@
 #include "qquickdialog_p.h"
 #include <private/qguiapplication_p.h>
 #include <qpa/qplatformintegration.h>
-#include <QTouchDevice>
 
 //#define PURE_QML_ONLY
 
diff --git a/src/dialogs/qquickabstractdialog.cpp b/src/dialogs/qquickabstractdialog.cpp
index e71948d1..8612d01c 100644
--- a/src/dialogs/qquickabstractdialog.cpp
+++ b/src/dialogs/qquickabstractdialog.cpp
@@ -223,7 +223,7 @@ void QQuickAbstractDialog::decorationLoaded()
             m_windowDecoration->setParentItem(parentItem);
             // Give the window decoration its content to manage
             QVariant contentVariant;
-            contentVariant.setValue<QQuickItem*>(m_contentItem);
+            contentVariant.setValue(m_contentItem);
             m_windowDecoration->setProperty("content", contentVariant);
             setDecorationDismissBehavior();
             connect(m_windowDecoration, SIGNAL(dismissed()), this, SLOT(reject()));
-- 
2.26.1.windows.1

