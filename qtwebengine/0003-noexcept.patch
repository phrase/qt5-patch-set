From 7bc834c1c836fba1718e6acd29f89043eaf55ca5 Mon Sep 17 00:00:00 2001
From: Michal Lazo <michal.lazo@memsource.com>
Date: Mon, 6 Jun 2022 15:01:25 +0200
Subject: [PATCH] noexcept

---
 chromium/components/history/core/browser/history_types.cc | 8 ++++----
 chromium/components/history/core/browser/history_types.h  | 8 ++++----
 .../indexed_db/scopes/disjoint_range_lock_manager.cc      | 6 +++---
 .../indexed_db/scopes/disjoint_range_lock_manager.h       | 6 +++---
 chromium/ui/color/color_mixer.cc                          | 4 ++--
 chromium/ui/color/color_mixer.h                           | 4 ++--
 chromium/ui/color/color_recipe.cc                         | 4 ++--
 chromium/ui/color/color_recipe.h                          | 4 ++--
 8 files changed, 22 insertions(+), 22 deletions(-)

diff --git a/chromium/components/history/core/browser/history_types.cc b/chromium/components/history/core/browser/history_types.cc
index de0401028b5..ef0323cadb5 100644
--- a/src/3rdparty/chromium/components/history/core/browser/history_types.cc
+++ b/src/3rdparty/chromium/components/history/core/browser/history_types.cc
@@ -38,11 +38,11 @@ QueryResults::QueryResults() = default;
 
 QueryResults::~QueryResults() = default;
 
-QueryResults::QueryResults(QueryResults&& other) noexcept {
+QueryResults::QueryResults(QueryResults&& other) {
   Swap(&other);
 }
 
-QueryResults& QueryResults::operator=(QueryResults&& other) noexcept {
+QueryResults& QueryResults::operator=(QueryResults&& other) {
   Swap(&other);
   return *this;
 }
@@ -364,9 +364,9 @@ DeletionInfo::DeletionInfo(const DeletionTimeRange& time_range,
 
 DeletionInfo::~DeletionInfo() = default;
 
-DeletionInfo::DeletionInfo(DeletionInfo&& other) noexcept = default;
+DeletionInfo::DeletionInfo(DeletionInfo&& other) = default;
 
-DeletionInfo& DeletionInfo::operator=(DeletionInfo&& rhs) noexcept = default;
+DeletionInfo& DeletionInfo::operator=(DeletionInfo&& rhs) = default;
 
 // Clusters --------------------------------------------------------------------
 
diff --git a/chromium/components/history/core/browser/history_types.h b/chromium/components/history/core/browser/history_types.h
index 803799da3c1..b063b9e2eac 100644
--- a/src/3rdparty/chromium/components/history/core/browser/history_types.h
+++ b/src/3rdparty/chromium/components/history/core/browser/history_types.h
@@ -136,8 +136,8 @@ class QueryResults {
   QueryResults();
   ~QueryResults();
 
-  QueryResults(QueryResults&& other) noexcept;
-  QueryResults& operator=(QueryResults&& other) noexcept;
+  QueryResults(QueryResults&& other);
+  QueryResults& operator=(QueryResults&& other);
 
   void set_reached_beginning(bool reached) { reached_beginning_ = reached; }
   bool reached_beginning() { return reached_beginning_; }
@@ -589,8 +589,8 @@ class DeletionInfo {
 
   ~DeletionInfo();
   // Move-only because of potentially large containers.
-  DeletionInfo(DeletionInfo&& other) noexcept;
-  DeletionInfo& operator=(DeletionInfo&& rhs) noexcept;
+  DeletionInfo(DeletionInfo&& other);
+  DeletionInfo& operator=(DeletionInfo&& rhs);
 
   // If IsAllHistory() returns true, all URLs are deleted and `deleted_rows()`
   //  and `favicon_urls()` are undefined.
diff --git a/chromium/components/services/storage/indexed_db/scopes/disjoint_range_lock_manager.cc b/chromium/components/services/storage/indexed_db/scopes/disjoint_range_lock_manager.cc
index 0fb46a7002c..0d048834c95 100644
--- a/src/3rdparty/chromium/components/services/storage/indexed_db/scopes/disjoint_range_lock_manager.cc
+++ b/src/3rdparty/chromium/components/services/storage/indexed_db/scopes/disjoint_range_lock_manager.cc
@@ -21,14 +21,14 @@ DisjointRangeLockManager::LockRequest::LockRequest(
     : requested_type(type),
       locks_holder(std::move(locks_holder)),
       acquired_callback(std::move(acquired_callback)) {}
-DisjointRangeLockManager::LockRequest::LockRequest(LockRequest&&) noexcept =
+DisjointRangeLockManager::LockRequest::LockRequest(LockRequest&&) =
     default;
 DisjointRangeLockManager::LockRequest::~LockRequest() = default;
 DisjointRangeLockManager::Lock::Lock() = default;
-DisjointRangeLockManager::Lock::Lock(Lock&&) noexcept = default;
+DisjointRangeLockManager::Lock::Lock(Lock&&) = default;
 DisjointRangeLockManager::Lock::~Lock() = default;
 DisjointRangeLockManager::Lock& DisjointRangeLockManager::Lock::operator=(
-    DisjointRangeLockManager::Lock&&) noexcept = default;
+    DisjointRangeLockManager::Lock&&) = default;
 
 DisjointRangeLockManager::DisjointRangeLockManager(int level_count)
     : task_runner_(base::SequencedTaskRunnerHandle::Get()) {
diff --git a/chromium/components/services/storage/indexed_db/scopes/disjoint_range_lock_manager.h b/chromium/components/services/storage/indexed_db/scopes/disjoint_range_lock_manager.h
index b6dfcc117f9..3c0384b0973 100644
--- a/src/3rdparty/chromium/components/services/storage/indexed_db/scopes/disjoint_range_lock_manager.h
+++ b/src/3rdparty/chromium/components/services/storage/indexed_db/scopes/disjoint_range_lock_manager.h
@@ -62,7 +62,7 @@ class DisjointRangeLockManager : public ScopesLockManager {
   struct LockRequest {
    public:
     LockRequest();
-    LockRequest(LockRequest&&) noexcept;
+    LockRequest(LockRequest&&);
     LockRequest(LockType type,
                 base::WeakPtr<ScopesLocksHolder> locks_holder,
                 base::OnceClosure callback);
@@ -79,10 +79,10 @@ class DisjointRangeLockManager : public ScopesLockManager {
   struct Lock {
     Lock();
     Lock(const Lock&) = delete;
-    Lock(Lock&&) noexcept;
+    Lock(Lock&&);
     ~Lock();
     Lock& operator=(const Lock&) = delete;
-    Lock& operator=(Lock&&) noexcept;
+    Lock& operator=(Lock&&);
 
     bool CanBeAcquired(LockType lock_type) {
       return acquired_count == 0 ||
diff --git a/chromium/ui/color/color_mixer.cc b/chromium/ui/color/color_mixer.cc
index e0a2b05664f..9cd14853f33 100644
--- a/src/3rdparty/chromium/ui/color/color_mixer.cc
+++ b/src/3rdparty/chromium/ui/color/color_mixer.cc
@@ -16,9 +16,9 @@ ColorMixer::ColorMixer(const ColorMixer* previous_mixer,
     : previous_mixer_(previous_mixer),
       input_mixer_getter_(std::move(input_mixer_getter)) {}
 
-ColorMixer::ColorMixer(ColorMixer&&) noexcept = default;
+ColorMixer::ColorMixer(ColorMixer&&) = default;
 
-ColorMixer& ColorMixer::operator=(ColorMixer&&) noexcept = default;
+ColorMixer& ColorMixer::operator=(ColorMixer&&) = default;
 
 ColorMixer::~ColorMixer() = default;
 
diff --git a/chromium/ui/color/color_mixer.h b/chromium/ui/color/color_mixer.h
index c2215bd39b0..34ab3ae3bdc 100644
--- a/src/3rdparty/chromium/ui/color/color_mixer.h
+++ b/src/3rdparty/chromium/ui/color/color_mixer.h
@@ -42,8 +42,8 @@ class COMPONENT_EXPORT(COLOR) ColorMixer {
                       MixerGetter input_mixer_getter = base::NullCallback());
   // ColorMixer is movable since it holds both sets and recipes, each of which
   // might be expensive to copy.
-  ColorMixer(ColorMixer&&) noexcept;
-  ColorMixer& operator=(ColorMixer&&) noexcept;
+  ColorMixer(ColorMixer&&);
+  ColorMixer& operator=(ColorMixer&&);
   ~ColorMixer();
 
   // Adds a recipe for |id| if it does not exist.
diff --git a/chromium/ui/color/color_recipe.cc b/chromium/ui/color/color_recipe.cc
index 74d78cdaac5..3cf08744bec 100644
--- a/src/3rdparty/chromium/ui/color/color_recipe.cc
+++ b/src/3rdparty/chromium/ui/color/color_recipe.cc
@@ -22,9 +22,9 @@ ColorRecipe::ColorRecipe(const ColorRecipe&) = default;
 
 ColorRecipe& ColorRecipe::operator=(const ColorRecipe&) = default;
 
-ColorRecipe::ColorRecipe(ColorRecipe&&) noexcept = default;
+ColorRecipe::ColorRecipe(ColorRecipe&&) = default;
 
-ColorRecipe& ColorRecipe::operator=(ColorRecipe&&) noexcept = default;
+ColorRecipe& ColorRecipe::operator=(ColorRecipe&&) = default;
 
 ColorRecipe::~ColorRecipe() = default;
 
diff --git a/chromium/ui/color/color_recipe.h b/chromium/ui/color/color_recipe.h
index 8c55bdedbc5..8dbf7ac2972 100644
--- a/src/3rdparty/chromium/ui/color/color_recipe.h
+++ b/src/3rdparty/chromium/ui/color/color_recipe.h
@@ -27,8 +27,8 @@ class COMPONENT_EXPORT(COLOR) ColorRecipe {
   ColorRecipe(const ColorTransform& transform);
   ColorRecipe(const ColorRecipe&);
   ColorRecipe& operator=(const ColorRecipe&);
-  ColorRecipe(ColorRecipe&&) noexcept;
-  ColorRecipe& operator=(ColorRecipe&&) noexcept;
+  ColorRecipe(ColorRecipe&&);
+  ColorRecipe& operator=(ColorRecipe&&);
   ~ColorRecipe();
 
   ColorRecipe& operator+=(const ColorTransform& transform);
-- 
2.26.1.windows.1

