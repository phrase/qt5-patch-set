From a320e3c5146d6a1fd3ff08348b86449c0fbc2c0f Mon Sep 17 00:00:00 2001
From: Michal Lazo <michal.lazo@memsource.com>
Date: Wed, 7 Jun 2023 11:23:56 +0200
Subject: [PATCH] disable zlib as static library

Change-Id: Id1d3da2e2faa615611f3ea545c4379770b69d122
---
 cmake/FindWrapSystemZLIB.cmake   | 32 ---------------------
 cmake/FindWrapZLIB.cmake         | 40 +++++++++++++++++++-------
 configure.cmake                  |  5 ++--
 src/3rdparty/zlib/CMakeLists.txt | 49 --------------------------------
 src/3rdparty/zlib/src/gzguts.h   | 15 +++++++++-
 src/3rdparty/zlib/src/zutil.h    |  4 ++-
 src/CMakeLists.txt               |  5 ----
 src/corelib/CMakeLists.txt       | 35 ++++++++++++++++++++---
 8 files changed, 80 insertions(+), 105 deletions(-)
 delete mode 100644 cmake/FindWrapSystemZLIB.cmake
 delete mode 100644 src/3rdparty/zlib/CMakeLists.txt

diff --git a/cmake/FindWrapSystemZLIB.cmake b/cmake/FindWrapSystemZLIB.cmake
deleted file mode 100644
index 5db43db626..0000000000
--- a/cmake/FindWrapSystemZLIB.cmake
+++ /dev/null
@@ -1,32 +0,0 @@
-# Copyright (C) 2022 The Qt Company Ltd.
-# SPDX-License-Identifier: BSD-3-Clause
-
-# We can't create the same interface imported target multiple times, CMake will complain if we do
-# that. This can happen if the find_package call is done in multiple different subdirectories.
-if(TARGET WrapSystemZLIB::WrapSystemZLIB)
-    set(WrapSystemZLIB_FOUND ON)
-    return()
-endif()
-
-set(WrapSystemZLIB_FOUND OFF)
-
-find_package(ZLIB ${${CMAKE_FIND_PACKAGE_NAME}_FIND_VERSION})
-
-if(ZLIB_FOUND)
-    set(WrapSystemZLIB_FOUND ON)
-
-    add_library(WrapSystemZLIB::WrapSystemZLIB INTERFACE IMPORTED)
-    if(APPLE)
-        # On Darwin platforms FindZLIB sets IMPORTED_LOCATION to the absolute path of the library
-        # within the framework. This ends up as an absolute path link flag, which we don't want,
-        # because that makes our .prl files un-relocatable and also breaks iOS simulator_and_device
-        # SDK switching in Xcode.
-        # Just pass a linker flag instead.
-        target_link_libraries(WrapSystemZLIB::WrapSystemZLIB INTERFACE "-lz")
-    else()
-        target_link_libraries(WrapSystemZLIB::WrapSystemZLIB INTERFACE ZLIB::ZLIB)
-    endif()
-endif()
-
-include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(WrapSystemZLIB DEFAULT_MSG WrapSystemZLIB_FOUND)
diff --git a/cmake/FindWrapZLIB.cmake b/cmake/FindWrapZLIB.cmake
index 6cf60fab9f..323b6052c7 100644
--- a/cmake/FindWrapZLIB.cmake
+++ b/cmake/FindWrapZLIB.cmake
@@ -1,14 +1,32 @@
 # Copyright (C) 2022 The Qt Company Ltd.
 # SPDX-License-Identifier: BSD-3-Clause
 
-include(QtFindWrapHelper NO_POLICY_SCOPE)
-
-qt_find_package_system_or_bundled(wrap_zlib
-    FRIENDLY_PACKAGE_NAME "ZLIB"
-    WRAP_PACKAGE_TARGET "WrapZLIB::WrapZLIB"
-    WRAP_PACKAGE_FOUND_VAR_NAME "WrapZLIB_FOUND"
-    BUNDLED_PACKAGE_NAME "BundledZLIB"
-    BUNDLED_PACKAGE_TARGET "BundledZLIB"
-    SYSTEM_PACKAGE_NAME "WrapSystemZLIB"
-    SYSTEM_PACKAGE_TARGET "WrapSystemZLIB::WrapSystemZLIB"
-)
+# We can't create the same interface imported target multiple times, CMake will complain if we do
+# that. This can happen if the find_package call is done in multiple different subdirectories.
+if(TARGET WrapZLIB::WrapZLIB)
+    set(WrapZLIB_FOUND ON)
+    return()
+endif()
+
+set(WrapZLIB_FOUND OFF)
+
+find_package(ZLIB ${WrapZLIB_FIND_VERSION})
+
+if(ZLIB_FOUND)
+    set(WrapZLIB_FOUND ON)
+
+    add_library(WrapZLIB::WrapZLIB INTERFACE IMPORTED)
+    if(APPLE)
+        # On Darwin platforms FindZLIB sets IMPORTED_LOCATION to the absolute path of the library
+        # within the framework. This ends up as an absolute path link flag, which we don't want,
+        # because that makes our .prl files un-relocatable and also breaks iOS simulator_and_device
+        # SDK switching in Xcode.
+        # Just pass a linker flag instead.
+        target_link_libraries(WrapZLIB::WrapZLIB INTERFACE "-lz")
+    else()
+        target_link_libraries(WrapZLIB::WrapZLIB INTERFACE ZLIB::ZLIB)
+    endif()
+endif()
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(WrapZLIB DEFAULT_MSG WrapZLIB_FOUND)
diff --git a/configure.cmake b/configure.cmake
index 07a0b1836d..3bc803b191 100644
--- a/configure.cmake
+++ b/configure.cmake
@@ -7,7 +7,8 @@
 
 #### Libraries
 
-qt_find_package(WrapSystemZLIB 1.0.8 PROVIDED_TARGETS WrapSystemZLIB::WrapSystemZLIB MODULE_NAME global QMAKE_LIB zlib)
+qt_find_package(WrapZLIB 1.0.8 PROVIDED_TARGETS WrapZLIB::WrapZLIB MODULE_NAME global QMAKE_LIB zlib)
+# special case begin
 # Work around global target promotion failure when WrapZLIB is used on APPLE platforms.
 # What ends up happening is that the ZLIB::ZLIB target is not promoted to global by qt_find_package,
 # then qt_find_package(WrapSystemPNG) tries to find its dependency ZLIB::ZLIB, sees it's not global
@@ -969,7 +970,7 @@ qt_feature("stack-protector-strong" PRIVATE
 )
 qt_feature("system-zlib" PRIVATE
     LABEL "Using system zlib"
-    CONDITION WrapSystemZLIB_FOUND
+    CONDITION WrapZLIB_FOUND
 )
 qt_feature("zstd" PUBLIC
     LABEL "Zstandard support"
diff --git a/src/3rdparty/zlib/CMakeLists.txt b/src/3rdparty/zlib/CMakeLists.txt
deleted file mode 100644
index 81fc649538..0000000000
--- a/src/3rdparty/zlib/CMakeLists.txt
+++ /dev/null
@@ -1,49 +0,0 @@
-qt_internal_add_3rdparty_library(BundledZLIB
-    STATIC
-    SKIP_AUTOMOC
-    SOURCES
-        src/adler32.c
-        src/compress.c
-        src/crc32.c
-        src/crc32.h
-        src/deflate.c
-        src/deflate.h
-        src/gzclose.c
-        src/gzguts.h
-        src/gzlib.c
-        src/gzread.c
-        src/gzwrite.c
-        src/infback.c
-        src/inffast.c
-        src/inffast.h
-        src/inffixed.h
-        src/inflate.c
-        src/inflate.h
-        src/inftrees.c
-        src/inftrees.h
-        src/trees.c
-        src/trees.h
-        src/uncompr.c
-        src/zconf.h
-        src/zlib.h
-        src/zutil.c
-        src/zutil.h
-    DEFINES
-        QT_BUILD_CORE_LIB
-    INCLUDE_DIRECTORIES
-        $<TARGET_PROPERTY:Core,INCLUDE_DIRECTORIES>
-)
-
-set_target_properties(BundledZLIB PROPERTIES UNITY_BUILD OFF)
-
-qt_internal_add_sync_header_dependencies(BundledZLIB Core)
-
-qt_disable_warnings(BundledZLIB)
-
-qt_set_symbol_visibility_hidden(BundledZLIB)
-
-qt_internal_add_3rdparty_header_module(ZlibPrivate
-    EXTERNAL_HEADERS
-        src/zlib.h
-        src/zconf.h
-)
diff --git a/src/3rdparty/zlib/src/gzguts.h b/src/3rdparty/zlib/src/gzguts.h
index 26d2ac9bd0..3ec32af25f 100644
--- a/src/3rdparty/zlib/src/gzguts.h
+++ b/src/3rdparty/zlib/src/gzguts.h
@@ -3,7 +3,20 @@
  * For conditions of distribution and use, see copyright notice in zlib.h
  */
 
-#include <qconfig.h>
+#ifdef _MSC_VER
+#  ifndef _CRT_SECURE_NO_DEPRECATE
+#    define _CRT_SECURE_NO_DEPRECATE
+#  endif
+#  ifndef _CRT_NONSTDC_NO_DEPRECATE
+#    define _CRT_NONSTDC_NO_DEPRECATE
+#  endif
+// disable warnings like '=': conversion from 'size_t' to 'unsigned int', possible loss of data
+#  pragma warning(disable: 4267; disable: 4244)
+#endif
+
+#ifndef QT_BOOTSTRAPPED
+#  include <qconfig.h>
+#endif
 
 #ifdef QT_VISIBILITY_AVAILABLE
 #define HAVE_HIDDEN
diff --git a/src/3rdparty/zlib/src/zutil.h b/src/3rdparty/zlib/src/zutil.h
index 29c690eea0..14aba921b0 100644
--- a/src/3rdparty/zlib/src/zutil.h
+++ b/src/3rdparty/zlib/src/zutil.h
@@ -13,7 +13,9 @@
 #ifndef ZUTIL_H
 #define ZUTIL_H
 
-#include <qconfig.h>
+#ifndef QT_BOOTSTRAPPED
+#  include <qconfig.h>
+#endif
 
 #ifdef QT_VISIBILITY_AVAILABLE
 #define HAVE_HIDDEN
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 3fd80a259d..e489abb25f 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -37,11 +37,6 @@ if(QT_FEATURE_regularexpression AND NOT QT_FEATURE_system_pcre2)
 endif()
 qt_install_3rdparty_library_wrap_config_extra_file(BundledPcre2)
 
-if(NOT QT_FEATURE_system_zlib)
-    add_subdirectory(3rdparty/zlib)
-endif()
-qt_install_3rdparty_library_wrap_config_extra_file(BundledZLIB)
-
 add_subdirectory(corelib)
 if (QT_FEATURE_ctf AND QT_FEATURE_library)
     add_subdirectory(corelib/tracing)
diff --git a/src/corelib/CMakeLists.txt b/src/corelib/CMakeLists.txt
index 1a8cc08de5..5ff1f0ebff 100644
--- a/src/corelib/CMakeLists.txt
+++ b/src/corelib/CMakeLists.txt
@@ -3,7 +3,6 @@
 
 qt_find_package(Threads PROVIDED_TARGETS Threads::Threads)
 qt_find_package(WrapPCRE2 PROVIDED_TARGETS WrapPCRE2::WrapPCRE2)
-qt_find_package(WrapZLIB PROVIDED_TARGETS WrapZLIB::WrapZLIB)
 
 
 # compute the reverse relative path from QtCoreConfigExtras to the install prefix
@@ -314,7 +313,6 @@ qt_internal_add_module(Core
         ../3rdparty/tinycbor/src
     LIBRARIES
         Qt::GlobalConfigPrivate
-        WrapZLIB::WrapZLIB
     PRECOMPILED_HEADER
         "global/qt_pch.h"
     GENERATE_CPP_EXPORTS
@@ -673,9 +671,30 @@ qt_internal_extend_target(Core CONDITION QT_FEATURE_std_atomic64
         WrapAtomic::WrapAtomic
 )
 
+qt_internal_extend_target(Core CONDITION QT_FEATURE_system_zlib
+     LIBRARIES
+        WrapZLIB::WrapZLIB
+)
+
 qt_internal_extend_target(Core CONDITION NOT QT_FEATURE_system_zlib
-    LIBRARIES
-        Qt::ZlibPrivate
+    SOURCES
+        ../3rdparty/zlib/src/adler32.c
+        ../3rdparty/zlib/src/compress.c
+        ../3rdparty/zlib/src/crc32.c
+        ../3rdparty/zlib/src/deflate.c
+        ../3rdparty/zlib/src/gzclose.c
+        ../3rdparty/zlib/src/gzlib.c
+        ../3rdparty/zlib/src/gzread.c
+        ../3rdparty/zlib/src/gzwrite.c
+        ../3rdparty/zlib/src/infback.c
+        ../3rdparty/zlib/src/inffast.c
+        ../3rdparty/zlib/src/inflate.c
+        ../3rdparty/zlib/src/inftrees.c
+        ../3rdparty/zlib/src/trees.c
+        ../3rdparty/zlib/src/uncompr.c
+        ../3rdparty/zlib/src/zutil.c
+    INCLUDE_DIRECTORIES
+        ../3rdparty/zlib/src
 )
 
 qt_internal_extend_target(Core CONDITION QT_FEATURE_commandlineparser
@@ -1344,6 +1363,14 @@ qt_internal_add_docs(Core
     doc/qtcore.qdocconf
 )
 
+if(NOT QT_FEATURE_system_zlib)
+    qt_internal_add_3rdparty_header_module(ZlibPrivate
+        EXTERNAL_HEADERS
+            ../3rdparty/zlib/src/zlib.h
+            ../3rdparty/zlib/src/zconf.h
+    )
+endif()
+
 qt_internal_add_optimize_full_flags()
 
 # Copy / install an lldb python script into the QtCore.framework.dSYM bundle which searches
-- 
2.26.1.windows.1

