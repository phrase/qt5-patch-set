From 1abf39c94e9a7a68f7368cde57637bf9aabb01f8 Mon Sep 17 00:00:00 2001
From: Michal Lazo <michal.lazo@memsource.com>
Date: Thu, 2 Jun 2022 14:16:38 +0200
Subject: [PATCH] draw text misspelling our way

---
 src/gui/painting/qpainter.cpp | 56 +++++++++++++++++++++++++++++++++--
 src/gui/text/qtextformat.h    |  1 +
 2 files changed, 54 insertions(+), 3 deletions(-)

diff --git a/src/gui/painting/qpainter.cpp b/src/gui/painting/qpainter.cpp
index 5883cc5bbe..bd85dd2831 100644
--- a/src/gui/painting/qpainter.cpp
+++ b/src/gui/painting/qpainter.cpp
@@ -5973,12 +5973,56 @@ static QPixmap generateWavyPixmap(qreal maxRadius, const QPen &pen)
     return pixmap;
 }
 
+static void drawMisspellingUnderline(QPainter* painter, QPen& pen, const QPointF& pos, qreal width, qreal descent,
+                                     qreal underlinePosition)
+{
+    QTextCharFormat::UnderlineStyle     underlineStyle(QTextCharFormat::NoUnderline);
+    QLineF                              line( pos.x(), pos.y(), pos.x() + qFloor( width ), pos.y() );
+
+    qreal y = pos.y();
+    // compensate for different rounding rule in Core Graphics paint engine,
+    // ideally code like this should be moved to respective engines.
+    if (painter->paintEngine()->type() == QPaintEngine::CoreGraphics) {
+        y = qCeil( y );
+    }
+
+    QPlatformTheme *theme = QGuiApplicationPrivate::platformTheme();
+    if (theme)
+        underlineStyle = QTextCharFormat::UnderlineStyle(theme->themeHint(QPlatformTheme::SpellCheckUnderlineStyle).toInt());
+
+    if ( underlineStyle == QTextCharFormat::WaveUnderline || underlineStyle == QTextCharFormat::SpellCheckUnderline ) {
+        painter->save();
+        painter->translate(0, pos.y() + 1);
+
+        pen.setColor(Qt::red);
+
+        // Adapt wave to underlineOffset or pen width, whatever is larger, to make it work on all platforms
+        //const QPixmap wave = generateWavyPixmap(qMax(underlineOffset, pen.widthF()), pen);
+        const QPixmap wave = generateWavyPixmap(descent / 2.0, pen);
+
+        painter->setBrushOrigin( painter->brushOrigin().x(), 0 );
+        painter->fillRect( pos.x(), 0, qCeil( width ), qMin( wave.height(), ( int ) descent ), wave );
+        painter->restore();
+    } else if (underlineStyle != QTextCharFormat::NoUnderline) {
+        painter->save();
+        QLineF underLine(line.x1(), underlinePosition, line.x2(), underlinePosition);
+
+        pen.setColor(Qt::red);
+
+        pen.setStyle((Qt::PenStyle)(underlineStyle));
+        painter->setPen(pen);
+        painter->drawLine(underLine);
+        painter->restore();
+    }
+}
+
 static void drawTextItemDecoration(QPainter *painter, const QPointF &pos, const QFontEngine *fe, QTextEngine *textEngine,
                                    QTextCharFormat::UnderlineStyle underlineStyle,
                                    QTextItem::RenderFlags flags, qreal width,
                                    const QTextCharFormat &charFormat)
 {
     if (underlineStyle == QTextCharFormat::NoUnderline
+        && !charFormat.boolProperty( QTextCharFormat::TextMisspelling )
         && !(flags & (QTextItem::StrikeOut | QTextItem::Overline)))
         return;
 
@@ -5993,6 +6037,9 @@ static void drawTextItemDecoration(QPainter *painter, const QPointF &pos, const
     QLineF line(qFloor(pos.x()), pos.y(), qFloor(pos.x() + width), pos.y());
 
     const qreal underlineOffset = fe->underlinePosition().toReal();
+    // deliberately ceil the offset to avoid the underline coming too close to
+    // the text above it.
+    const qreal underlinePos = pos.y() + qCeil(underlineOffset) + 0.5;
 
     if (underlineStyle == QTextCharFormat::SpellCheckUnderline) {
         QPlatformTheme *theme = QGuiApplicationPrivate::platformTheme();
@@ -6005,15 +6052,14 @@ static void drawTextItemDecoration(QPainter *painter, const QPointF &pos, const
     if (underlineStyle == QTextCharFormat::WaveUnderline) {
         painter->save();
         painter->translate(0, pos.y() + 1);
-        qreal maxHeight = fe->descent().toReal() - qreal(1);
 
         QColor uc = charFormat.underlineColor();
         if (uc.isValid())
             pen.setColor(uc);
 
         // Adapt wave to underlineOffset or pen width, whatever is larger, to make it work on all platforms
-        const QPixmap wave = generateWavyPixmap(qMin(qMax(underlineOffset, pen.widthF()), maxHeight / qreal(2.)), pen);
-        const int descent = qFloor(maxHeight);
+        const QPixmap wave = generateWavyPixmap(fe->descent().toReal() / 2.0, pen);
+        const int descent = (int) fe->descent().toReal();
 
         painter->setBrushOrigin(painter->brushOrigin().x(), 0);
         painter->fillRect(pos.x(), 0, qCeil(width), qMin(wave.height(), descent), wave);
@@ -6038,6 +6084,10 @@ static void drawTextItemDecoration(QPainter *painter, const QPointF &pos, const
             painter->drawLine(underline);
     }
 
+    if (charFormat.boolProperty( QTextCharFormat::TextMisspelling )) {
+        drawMisspellingUnderline( painter, pen, pos, width, fe->descent().toReal(), underlinePos );
+    }
+
     pen.setStyle(Qt::SolidLine);
     pen.setColor(oldPen.color());
 
diff --git a/src/gui/text/qtextformat.h b/src/gui/text/qtextformat.h
index 91f76e9987..1c51789b5a 100644
--- a/src/gui/text/qtextformat.h
+++ b/src/gui/text/qtextformat.h
@@ -205,6 +205,7 @@ public:
         TextSuperScriptBaseline = 0x2025,
         TextSubScriptBaseline = 0x2026,
         TextBaselineOffset = 0x2027,
+        TextMisspelling = 0x2028,
 
         IsAnchor = 0x2030,
         AnchorHref = 0x2031,
-- 
2.26.1.windows.1

